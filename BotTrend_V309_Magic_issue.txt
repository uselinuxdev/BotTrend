//+------------------------------------------------------------------+
//|                                                     BotTrend.mq5 |
//|                                    Copyright 2019, Usefilm Corp. |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "Copyright 2020, Usefilm Corp."
#property link      "https://www.mql5.com"
#define VERSION "3.09"
#property version VERSION

// Inclusión de objetos de liberia estandar
#include<Trade\Trade.mqh>
#include <Trade\SymbolInfo.mqh>
#include <Trade\PositionInfo.mqh>
#include <Trade\AccountInfo.mqh>
#include "PanelBotTrend.mqh"


CTrade cTrade;
CSymbolInfo SymbolInfo;
CPositionInfo cPos;
CAccountInfo Cacc;
CAppDialog AppPanel;

//--- input parameters
enum ENUM_FRANCISCA
{
   SIN_FRANCISCA,
   FRANCISCA_10,
   FRANCISCA_20
};

enum ENUM_BOTMODE
{
   WORKING_DAY,
   SOFT_FRIDAY,
   SUMMER_TIME,
   CHRISTMAS,
   LATERAL_MODE,
   HIGH_LATERAL
};

enum ENUM_THREAD
{
   MAXPARM,
   ISFRIDAY,
   FOUNDS
};

enum ENUM_LICENCE
{
   GOLD,
   SILVER
};

enum ENUM_CENT
{
   CENT_1,
   CENT_10,
   CENT_20,
   CENT_50,
   CENT_100
};


enum ENUM_LATERAL
{
   SIN_LATERAL,
   STEP_2,
   STEP_3,
   STEP_4
};

// CONTROL POR TIEMPO
datetime timeCurent;
datetime timeCheck;

//--- Global vars
//+------------------------------------------------------------------+
//| Expert MAGIC number                                              |
//+------------------------------------------------------------------+
#define MAGICTREND 13330
string BOTNAME="TRENDBOT "+VERSION;
long ATRENDBOT[];
ulong ATREND[9][99];
double AMAXBULL[9];
double AminBear[9];
double ATRENDPROFIT[9];
MqlRates rLastBars[],rCurrent[];
string vtext;
enum ENUM_TIPOTEXT{MSGBOX,ALERT,COMMENT,PRINT};
ENUM_TIPOTEXT ENUMTXT;
// FRANCICA
input ENUM_FRANCISCA enumfrancisca=FRANCISCA_10;
ENUM_BOTMODE enumbotmode=WORKING_DAY;
ENUM_THREAD enumthread=MAXPARM;
ENUM_LICENCE enumlicence=GOLD;
double pips;
int iFrancisca=10;
int iCent=1;
input ENUM_TIMEFRAMES botperiod=PERIOD_M5;
input int      iMaxSpread=5;
input double   TakeProfit=60;
// input double   dComisionLot= 2.75; // IC MARKETS
input double   dComisionLot=1;
int iComisionPips=0;
input int      iExitProfitStep=0;
input int      piNumBars=3;
input int      iMaxThead=1;
input bool     bSoftFriday=true;
input bool     bHollidays=true;
input ENUM_CENT ENUMCENT=CENT_1;
input ENUM_LATERAL ENUMLATERAL=STEP_3;

// Dont open when the market will be to close. Or opened 1h.
int iHilos=0;
double dLotBear=0.0;
double dLotBULL=0.0;
double dCommision=0.0;
double dSwapAll=0.0;
double dNextScalp=0.0;
input short saddhour=3;
ENUM_ORDER_TYPE ENUMBARDIR;
double Lots = 0.01;
/////////////////////////////double dAccountEquity = 0.00;
int    lotdecimal = 2; 
//////////// Manejadores de media
int iHandlelow,iHandleMed,iHandleHigh=0;
double mabot[3];

//+------------------------------------------------------------------+
//| Control de licencias                                             |
//+------------------------------------------------------------------+
long ALOGINGOLD[];
long ALOGINSILVER[];
MqlDateTime MQDATELOGIN[];
//+------------------------------------------------------------------+
//| End control de licencias                                         |
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
  {
//---
   // Check point symbol
   double ticksize=SymbolInfoDouble(Symbol(), SYMBOL_TRADE_TICK_SIZE);
   pips=ticksize;
   timeCheck=TimeCurrent()+120;
   // INIT ARRAY DE PROFIT
   ArrayInitialize(ATRENDPROFIT,0);
   countbot(); 
   // Licence code
   LoadLicenceAccount();
   // Primer check de licences
   if(CheckLicence()==0) return -1;
   //--- create application dialog. Si falla da igual, continuar
   if(ExtDialog.Create(0,"BotTrend Panel version: "+VERSION,0,40,40,400,240))
   {
      //--- run application
      ExtDialog.Run();
   }
//---
   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
//---
   //--- destroy dialog
   ExtDialog.Destroy(reason);
  }
//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
  {
//---
   // Check period with input value
   timeCurent = TimeCurrent();
   if(Period()!= botperiod)
   {
         vtext="El perido es diferente al seleccionado en el robot : "+EnumToString(botperiod)+"!="+EnumToString(Period())+". Robot parado durante 30 segundos.";
         ENUMTXT = ALERT;
         expertLog();
         // Wait 30 second
         Sleep(30000);
         return;
   }
   // Sólo refrescar 1 vez lo Rates por Tick
   // Coger últimas barras
   GetLastBar();
   // Ajustar cent
   GetCent();
   // Contar ops.
   if(countbot()<0) return;
   // Every ticks Check Franciscada
   if(goFrancisca()<0) return;
   // Igualar SL y TP de todos los hilos
   // Comprobar cada 1min.
   if(timeCheck<timeCurent)
   {
      timeCheck = TimeCurrent()+60;
      // SL
      if(SetSLMax()<0) return;
      // Check for new steps
      if(CheckNewStep()<0) return;
      //HIGHTRENDBOT. Aqui tiene la variable activada enumbotmode=LATERAL_MODE para no abrir
      //////////////////////////////////////////////////////////////////////////////////////OpenHighTrend();
      // Comprobar BreakEvent
      if(CheckBreakEvent()<0) return;
      // Actualiza panel 
      RefressPanel();
   }
   //--- go trading only for first ticks of new bar. Actual bar is the last array element
   if(rCurrent[0].tick_volume==1)
   {
      // Comprobar Última operación por hilo para que no esté ningún hilo hurfano de op superior
      if(CheckLateralEdges()<0) return;
      // Open new positions
      if(MarketClosing()==0) return;
      if(BotVacation()==0) return;
      // Control de apertura 0 para abrir un hightrend si procede
      if(CheckForOpen()<0) return;
   }
  }
//+------------------------------------------------------------------+

// ------------------------------------------------------------------------------------------------------------------- //
//                                                BILLING CODE                                                         //
// ------------------------------------------------------------------------------------------------------------------- //
void LoadLicenceAccount()
{
   ArrayResize(ALOGINGOLD,25);
   ArrayFill(ALOGINGOLD,0,25,0);
   // Creator accounts
   ALOGINGOLD[0]=5141012;
   ALOGINGOLD[1]=50165336;    /// DEMO ACCOUNT
   ALOGINGOLD[2]=781805;    /// DEMO ACCOUNT VANTAGE
   // Client accounts
   // Miguel Bayon IC
   ALOGINGOLD[3]=5288734;
   // Carlos demo Account
   ALOGINGOLD[4]=781217; 
   // Miguel Demo Vantage
   ALOGINGOLD[5]=781025;
   // Cuenta DAVID (Sólo robot)
   ALOGINGOLD[6]=784357;
   // Gaiton
   ALOGINGOLD[7]=50489139;
   // Ivan Antolín
   ALOGINGOLD[8]=50489767;
   // Mick G. Johnson
   ALOGINGOLD[8]=810203;
   // Use ROBOFOREX
   ALOGINGOLD[9]=67013738;
     
   /////////////////////////////////////////////////////////////////////////////////////////
   // Silver licences. Posición igual Nº de cuenta y fecha
   ArrayResize(ALOGINSILVER,25);
   ArrayFill(ALOGINSILVER,0,25,0);
   ArrayResize(MQDATELOGIN,25);
   // Cuenta Carlos (IC Copy a mt4)
   ALOGINSILVER[0]=50427567; 
   // Fecha fin Carlos
   MQDATELOGIN[0].day=12;
   MQDATELOGIN[0].mon=12;
   MQDATELOGIN[0].year=2020;
   // Cuenta Carlos Roboforex
   ALOGINSILVER[1]=7802751; 
   // Fecha fin Carlos
   MQDATELOGIN[1].day=28;
   MQDATELOGIN[1].mon=2;
   MQDATELOGIN[1].year=2021;
   // Ivan Antolin Anual
   ALOGINSILVER[2]=7804562;
   // Fecha fin Ivan Inversores
   MQDATELOGIN[2].day=02;
   MQDATELOGIN[2].mon=4;
   MQDATELOGIN[2].year=2022;
   // Angel Hernangomez
   ALOGINSILVER[3]=7804521;
   MQDATELOGIN[3].day=01;
   MQDATELOGIN[3].mon=5;
   MQDATELOGIN[3].year=2022;
   // Mick G. Johnson
   ALOGINSILVER[4]=1139912;
   MQDATELOGIN[4].day=08;
   MQDATELOGIN[4].mon=05;
   MQDATELOGIN[4].year=2021;
   // Juan (Carlos Norte)
   ALOGINSILVER[5]=7803938;
   MQDATELOGIN[5].day=03;
   MQDATELOGIN[5].mon=07;
   MQDATELOGIN[5].year=2021;         
}
short CheckLicence()
{
   // Get actual account
   long laccount;
   laccount=Cacc.Login();
   // Check Gold licences
   
   for(int i=0;i<ArrayRange(ALOGINGOLD,0);i++)
   {
      if(ALOGINGOLD[i]==laccount)
      {
         vtext="Bot ha encontrado una licencia Gold para la cuenta:"+IntegerToString(laccount)+" - "+Cacc.Name();
         ENUMTXT = PRINT;
         expertLog();
         enumlicence=GOLD;
         return 1;
      }
   }
   // Buscar licencia por suscripción
   for(int i=0;i<ArrayRange(ALOGINSILVER,0);i++)
   {
      if(ALOGINSILVER[i]==laccount)
      {
         vtext="Bot ha encontrado una licencia Silver para la cuenta:"+IntegerToString(laccount)+" - "+Cacc.Name();
         ENUMTXT = PRINT;
         expertLog();
         printf("Licencia válida hasta el %02d/%02d/%4d",MQDATELOGIN[i].day,MQDATELOGIN[i].mon,MQDATELOGIN[i].year,".");
         enumlicence=SILVER;
         return 1;
      }
   }   
   vtext="La cuenta "+IntegerToString(laccount)+" no se encuentra licenciada.Último aviso, PAGA LA DROGA!";
   ENUMTXT = PRINT;
   expertLog();
   return 0;
}

short CheckSilverEnd()
{
   long laccount;
   datetime dNow=TimeCurrent();
   MqlDateTime strdate;
   TimeToStruct(dNow,strdate);
   // Si la licencia no es silver return 1
   if(enumlicence!=SILVER) return 1;
      // Get actual account
   laccount=Cacc.Login();
   // Buscar licencia por suscripción
   for(int i=0;i<ArrayRange(ALOGINSILVER,0);i++)
   {
      if(ALOGINSILVER[i]==laccount)
      {
         // Posición de cuenta en i
         if(MQDATELOGIN[i].year<=strdate.year && MQDATELOGIN[i].mon<=strdate.mon && MQDATELOGIN[i].day<strdate.day)
         {
            vtext="La cuenta "+IntegerToString(laccount)+" ha finalizado su perido de suscripción.Renueve su licencia!!!.";
            ENUMTXT = PRINT;
            expertLog();
            printf("La licencia finalizó el %02d/%02d/%4d",MQDATELOGIN[i].day,MQDATELOGIN[i].mon,MQDATELOGIN[i].year,".");
            return 0;
         }
         // La licencia poner el último día válido
         if(MQDATELOGIN[i].year==strdate.year && MQDATELOGIN[i].mon==strdate.mon && MQDATELOGIN[i].day+7>strdate.day)
         {
            vtext="La cuenta "+IntegerToString(laccount)+" finaliza su suscripción en menos de 7 días.";
            ENUMTXT = PRINT;
            expertLog();
            printf("La licencia finalizará el %02d/%02d/%4d",MQDATELOGIN[i].day,MQDATELOGIN[i].mon,MQDATELOGIN[i].year,".");
            return 1;
         }
         // Licencia encontrada y correcta
         return 1;
      }
   } 
   // Bien
   return 0;
}

// ------------------------------------------------------------------------------------------------------------------- //
//                                                BILLING CODE END                                                     //
// ------------------------------------------------------------------------------------------------------------------- //


// FUNTION BOT SECTION
void expertLog()
{
   switch(ENUMTXT){
      case MSGBOX:MessageBox(vtext);break;
      case ALERT:Alert(vtext);break;
      case COMMENT:Comment(vtext);break;
      case PRINT:Print(vtext);break;
   }
}  
void GetLastBar()
{
   SymbolInfo.Name(_Symbol);
   SymbolInfo.Refresh();
   SymbolInfo.RefreshRates();
   int copied=CopyRates(Symbol(),0,1,piNumBars,rLastBars);
   if(copied<piNumBars)
   {
      vtext="El copiado de datos historicos de "+_Symbol+" ha fallado, historial no disponible.";
      ENUMTXT = ALERT;
      expertLog();
      return;
   }
   CopyRates(Symbol(),0,0,1,rCurrent); 
}
// La funcion retorna si el Nº mágico es de los del bot.2 Si es un TBOT
short IsMyMagic(long lMagicCheck)
{
   vtext = "Check Nº magico:"+IntegerToString(lMagicCheck);
   ENUMTXT = PRINT;
   //expertLog();
   if(lMagicCheck >=MAGICTREND && lMagicCheck<=MAGICTREND+9) return 1;
   // No es de los nuestros
   return 0;
}

// Función de actualización de datos del panel
void RefressPanel()
{
  ExtDialog.UpdatePannel(EnumToString(enumbotmode),dLotBULL,dLotBear,iHilos,EnumToString(enumthread),dCommision,dSwapAll,dNextScalp);
}


void checkBardir()
{
   // Declarations and rest values.
   ENUMBARDIR = WRONG_VALUE;
   ENUMTXT = PRINT;
   vtext="";
   //vtext = "Comprobando tendencia de los últimos "+IntegerToString(piNumBars)+" periodos.";
   //expertLog();
   // Recorrer las Nvelas desde la posicion anterior a la actual 0
   // Check tendence: iPopen 0 is the actual bar
   if(iOpen(NULL,PERIOD_CURRENT,0)< iOpen(NULL,PERIOD_CURRENT,piNumBars))
   {
      vtext = "Detectada tendencia BEAR (SELL).Usando tendecia.";
      ENUMBARDIR = ORDER_TYPE_SELL;
   }
   else
   {
      vtext = "Detectada tendencia BULL (BUY).Usando tendecia.";
      ENUMBARDIR = ORDER_TYPE_BUY;
   }
  // Print check result
  expertLog();  
}

/// Cálculo comisión por lote. De las posición cargada. El importe es negativo
double getComisionPos()
{
   double dComm=0;
   dComm=NormalizeDouble(cPos.Volume()*(dComisionLot*2),Digits());
   dComm=dComm*(-1);
   //Calculo de comisiones en pips
   iComisionPips=int(dComisionLot*2);
   return dComm;
}


void GetCent()
{
   // CENT MODE
   //Asignar CentMode
   switch(ENUMCENT)
   {
      case CENT_1:
         iCent=1;
         break;
      case CENT_10:
         iCent=10;
         break;
      case CENT_20:
         iCent=20;
         break;
      case CENT_50:
         iCent=50;
         break;
      case CENT_100:
         iCent=100;
         break;
   }
}

/////////////////////////////////////////////// Contar bots. MAX 9 hilos
short countbot()
{
   int ipos=0; 
   ulong lmagic=0;
   // La funcion cuenta los bot que estan abiertos actualmente. Resetea el array con 0 
   ArrayResize(ATRENDBOT,9);
   ArrayFill(ATRENDBOT,0,9,0);
   // Nuevo array HILO, VALOR
   ArrayInitialize(ATREND,0);
   // Arrays de max y min values
   ArrayInitialize(AminBear,0);
   ArrayInitialize(AMAXBULL,0);
   // Valores panel
   dLotBear=0.0;
   dLotBULL=0.0;
   dCommision=0.0;
   dSwapAll=0.0;
   
   ulong ticket=0;
   for(int i=0;i<PositionsTotal();i++) // returns the number of current positions
   {
      if(!cPos.SelectByIndex(i))
      {
         Print("Error al seleccionar orden. Error = ",GetLastError());
         return -1;
      }
      if(_Symbol!=cPos.Symbol()) continue; 
      
      // Check Bot
      lmagic=cPos.Magic();
      if(IsMyMagic(lmagic))
      {
         ticket=cPos.Ticket();
         //// TEST
        ////////// if(ticket==1222)
        //// {
        ////    ipos=(int)(lmagic-MAGICTREND);
        //// }
         // Seleccionar deal
         ipos=(int)(lmagic-MAGICTREND);
         ATRENDBOT[ipos]=(int)lmagic;
         // Calculo de comisión: Tamaño del lote * Importe de la comisión * 2(Apertura y cierre).
         dCommision+=getComisionPos();
         dSwapAll+=cPos.Swap();
         if(cPos.PositionType()==POSITION_TYPE_SELL)
         {
            dLotBear+=cPos.Volume();
            // Control de minBear
            if(AminBear[ipos]==0) AminBear[ipos]=cPos.PriceOpen();
            if(AminBear[ipos]>cPos.PriceOpen()) AminBear[ipos]=cPos.PriceOpen();
         }
         else
         {
            dLotBULL+=cPos.Volume();
            // Control de MAXBULL
            if(AMAXBULL[ipos]<cPos.PriceOpen()) AMAXBULL[ipos]=cPos.PriceOpen();
         }
         // El proceso siempre retorna el array de menor a mayor ticket
         for(int x=0;x<99;x++)
         {
            // Control si encuentra parar.
            if(ATREND[ipos][x]==0)
            {
               ATREND[ipos][x]=ticket;
               x=99;
            }
         }
      }
   }
   /////////////////////////////////////
   return 1;
}
/// Retorna el código de hilo por la fecha inicial
string GetTCode()
{
   string scode="";
   scode=DoubleToString(Cacc.Equity(),2);
   return scode;
}

// 

short CheckForOpen()
{
   int ifreepos=0;
   double TP0=0.0;
   double dLotOpen=Lots;
   double dCommOpen=0.0;
   double dAddSpread=0.00;
   string scoment="";
   //Doble lote en horas de baja actividad
   datetime dNow=TimeCurrent();
   MqlDateTime strdate;
   
  
   //Recalc CENT
   dLotOpen=dLotOpen*iCent;

// Si hay mucho movimiento salirse
   if(iMaxSpread < SymbolInfo.Spread())
   {
      vtext="El Spread actual "+IntegerToString(SymbolInfo.Spread())+" es superior al máximo configurado en el robot.";
      ENUMTXT = PRINT;
      expertLog();
      return -1;   
   }
//--- additional checking
   if(TerminalInfoInteger(TERMINAL_TRADE_ALLOWED))
   {
      // Control de licencias por suscripción
      if(CheckSilverEnd()==0) return -1;
      // Tipo de tendencia
      // Obtener posicion de array disponible
      ifreepos=GetFreePos();
      if (ifreepos < 0)
      {
         vtext="No se ha creado una nueva orden al haber llegado al máximo de hilos.";
         ///expertLog();   // Texto pintado en funcion GetFreePos
         return 0;  
      }
      // Cambiar mode del bot
      enumbotmode=WORKING_DAY;
      // Reset contador de beneficios
      ATRENDPROFIT[ifreepos]=Cacc.Balance();
      // Pintar tendencia. Sólo cuando se va a abrir
      // Bar is new  
      checkBardir();
      // Control doble lote
      // Controlar doble lote
      TimeToStruct(dNow,strdate);
      // Peso del Spread añadir al SL
      dAddSpread=MathAbs(SymbolInfo.Bid()-SymbolInfo.Ask());
      if(dAddSpread>(iFrancisca*pips)) dAddSpread=iFrancisca*pips;
      // Control de comisión
      dCommOpen+=iComisionPips;
      // COMENTARIO MAX 32 CHAR
      scoment=GetTCode();
      scoment=BOTNAME+" ("+scoment+") : 0";
      switch(ENUMBARDIR)
      {
         case ORDER_TYPE_SELL:
            // Asignar el numero mágico de ventas   
            cTrade.SetExpertMagicNumber(ATRENDBOT[ifreepos]);
            // Control de SWAP
            if(SymbolInfo.SwapShort()<0)dCommOpen+=4;
            TP0=SymbolInfo.Bid()-(TakeProfit*pips)-(dCommOpen*pips)-dAddSpread;
            if(!cTrade.Sell(dLotOpen,_Symbol,0,0,TP0,scoment))
            {
               vtext="Se ha producido el error "+IntegerToString(GetLastError())+" al abrir una operación de "+DoubleToString(Lots)+".";
               ENUMTXT = PRINT;
               expertLog();
            }
            return 1;
            break;  
         case ORDER_TYPE_BUY:
            // Asignar el numero mágico de ventas
            cTrade.SetExpertMagicNumber(ATRENDBOT[ifreepos]);
            // Control de SWAP
            if(SymbolInfo.SwapLong()<0)dCommOpen+=4;
            TP0=SymbolInfo.Ask()+(TakeProfit*pips)+(dCommOpen*pips)+dAddSpread;
            if(!cTrade.Buy(dLotOpen,_Symbol,0,0,TP0,scoment))
            {
               vtext="Se ha producido el error "+IntegerToString(GetLastError())+" al abrir una operación de "+DoubleToString(Lots)+".";
               ENUMTXT = PRINT;
               expertLog();
            }
            return 1; 
            break;
      }
      // Contar ops.
      if(countbot()<0) return -1;           
   }
   return 0;
}

// Obtener una posicion libre en el array
int GetFreePos()
{  
   // Evaluar cuenta para Nº de hilos MAX 9. Cada 1500 1 hilo
   double dEquity=0;
   iHilos=0;
   datetime dNow=TimeCurrent();
   MqlDateTime strdate;
   
   dEquity=NormalizeDouble(AccountInfoDouble(ACCOUNT_EQUITY),2);
   iHilos=(int)MathFloor(dEquity/1250);
   enumthread=FOUNDS;
   if(iHilos<1)iHilos=1;
   if(iHilos>iMaxThead) 
   {
      iHilos=iMaxThead;
      enumthread=MAXPARM;
   }
   if(iHilos>9)iHilos=9;
   for(int i=0;i<iHilos;i++)
   {
      if(ATRENDBOT[i]==0)
      {              
         ATRENDBOT[i]=MAGICTREND+i;
         vtext="Número de hilos disponibles para la cuenta de "+(string)dEquity+" "+AccountInfoString(ACCOUNT_CURRENCY)+": "+IntegerToString(iHilos);
         ENUMTXT = PRINT;
         expertLog();
         return i;
      }
   }
   return -1;
}
// No operar en navidad ni el 1 de agosto (+- 7 días).
short BotVacation()
{
   datetime dNow=TimeCurrent();
   MqlDateTime strdate;
   // Si esta desactivado ok
   if(!bHollidays) return 1;
   // Esta activado
   TimeToStruct(dNow,strdate);
   // Si es navidad
   if((strdate.mon==12 && strdate.day>19) || (strdate.mon==1 && strdate.day<7) )
   {
         vtext="Desactivada apertura en vacaciones de Navidad. FELIZ NAVIDAD.";
         enumbotmode=CHRISTMAS;
         //ENUMTXT = PRINT;
         //expertLog();
         return 0;
   }
   // Vacaciones de verano
   if((strdate.mon==7 && strdate.day>25) || (strdate.mon==8 && strdate.day<5) )
   {
         vtext="Desactivada apertura en vacaciones de verano. El bot esta de vacas.";
         enumbotmode=SUMMER_TIME;
         //ENUMTXT = PRINT;
         //expertLog();
         return 0;
   }
   // Bien
   return 1;
}

short MarketClosing()
{
   datetime dNow=TimeCurrent();
   uint session_index=0;
   ENUM_DAY_OF_WEEK eday;
   MqlDateTime strdate;
   long lmagic=0; 
   double dprice=0.0;
   // Check date 
   TimeToStruct(dNow,strdate);
   eday=(ENUM_DAY_OF_WEEK) strdate.day_of_week;
   SymbolInfo.Name(_Symbol);
   SymbolInfo.Refresh();
   SymbolInfo.RefreshRates();
   
   enumthread=MAXPARM;
   enumbotmode=WORKING_DAY;
   
   // No operar la 1a hora de apertura
   if(strdate.day_of_week==1 && strdate.hour<saddhour)
   {
      if(strdate.min==0)
      {
         vtext="Desactivada la creación de nuevas operaciones en la primera hora de apertura de mercado.";
         ENUMTXT = PRINT;
         expertLog();
      }
      return 0;
   }
   // Control último día de la semana de forex
   if(bSoftFriday==true)
   {
      if(strdate.day_of_week<4) return 1;
      // Control jueves tarde / noche
      if(strdate.day_of_week==4 && (strdate.hour+saddhour)<23) return 1; 
      if(strdate.min==0)
      {
         vtext="Último día de mercado con parámetro de nuevas operaciones desactivado bSoftFriday.";
         ENUMTXT = PRINT;
         expertLog();
      }
      enumthread=ISFRIDAY;
      enumbotmode=SOFT_FRIDAY;
      return 0;      
   } 
   return 1;
}

///////////////////// Funtions get steps

ulong GetStep()
{
   ulong lstep=0;
   string scoment="";
   // Coger scoment
   scoment=StringSubstr(cPos.Comment(), (StringLen(cPos.Comment())-2));
   // Control de comentario vacio. Calcula por tamaño del lote
   StringTrimLeft(scoment);
   lstep=StringToInteger(scoment);
   return lstep;
}

// Buscar posición emparejada TP=SL
// Ticket de la que buscar su par
// Con iPos sabemos si se quiere localizar el salto anterior (-1), posterior(+1) Omega (0) 2 ops en salto TP=TP
ulong GetPair(ulong ticket,int iPos)
{
   double dTPFound = 0.00;
   double dTP = 0.00;
   double dSLFound = 0.00;
   double dSL = 0.00;
   int ipos=0;
   // Cargar la el ticket pasado por parámetro
   if(!cPos.SelectByTicket(ticket))
   {
      vtext="Error en GetPair al seleccionar ticket "+IntegerToString(ticket)+" : "+IntegerToString(GetLastError());
      ENUMTXT = PRINT;
      expertLog();
      return 0;
   }
   // Localizar el array del ticket
   ipos=(int)(cPos.Magic()-MAGICTREND);
   dTPFound=NormalizeDouble(cPos.TakeProfit(),Digits());
   dSLFound=NormalizeDouble(cPos.StopLoss(),Digits());
   // Localizar el array del ticket
   for(int i=0;i<99;i++)
   {
      // Si ha llegado al final de las posiciones usadas no existe
      if(ATREND[ipos][i]==0) return 0;
      // Si es el ticket a buscar siguiente
      if(ATREND[ipos][i]==ticket) continue;
      // Control de ticket a localizar. iPos para menor o Mayor a la actual
      if((iPos<0) && ATREND[ipos][i]>ticket) continue; // Localizando tickets previos al cargado
      if((iPos>0) && ATREND[ipos][i]<ticket) continue; // Localizando tickets posteriores al cargado
      if(!cPos.SelectByTicket(ATREND[ipos][i]))
      {
         Print("Error al seleccionar orden. Error = ",GetLastError());
         return -1;
      }
      dTP=NormalizeDouble(cPos.TakeProfit(),Digits());
      dSL=NormalizeDouble(cPos.StopLoss(),Digits());  
      // Si lo encuentra retornar valor
      if(dSLFound==dTP)
      {
        // vtext="Encontrado ticket de cobertura "+IntegerToString(ATREND[ipos][i])+" .";
        // ENUMTXT = PRINT;
         return ATREND[ipos][i];
      }
      if(dTPFound==dSL)
      {
        // vtext="Encontrado ticket de compensación "+IntegerToString(ATREND[ipos][i])+" .";
        // ENUMTXT = PRINT;
         return ATREND[ipos][i];
      }
   }
   // Bien
   return 0;
}

// Se le pasa el tipo y el TP. Hasta 3 saltos dTP + 50%TP. Resto misma distancia
double GetSLStep(ulong lstep,ENUM_POSITION_TYPE TPOS)
{
   double dPrice=0;
   double dPips=0;
   double dTP=0;
   double dNewSL=0;
   ulong ulateral=0;
   datetime dNow=TimeCurrent();
   MqlDateTime strdate;
   TimeToStruct(dNow,strdate);
   // Coger el paso en modo lateral
   ulateral=GetLateralStep();
   // Obtener el precio
   dPrice=cPos.PriceOpen();
   dTP=cPos.TakeProfit();
   dPips=MathAbs(dPrice-dTP);
   // Siempre añadir 50% del TP.
   dPips+=(TakeProfit*0.5*pips);
   // Descontar la ganacia para operaciones > 1
   if(lstep>1)
   {
      dPips-=(iFrancisca*2.5*pips);
   }
   // Descontar los pips que se añadieron por la comision de apertura
   dPips-=(iComisionPips*pips);
   // Calcular el SL dependiendo de la operación.
   if(TPOS==POSITION_TYPE_SELL)
   { 
      dNewSL=NormalizeDouble(dPrice+dPips,Digits());
   }
   // Posición de compras. Meter sl negativo
   else
   {
      dNewSL=NormalizeDouble(dPrice-dPips,Digits());
   }
   // Bien
   return dNewSL;
}
// ------------------------------------------------------------------------------------------------------------------- //
// ------------------------------------------- MATRINGALA2 CODE ------------------------------------------------------ //
// ------------------------------------------------------------------------------------------------------------------- //

// Comprueba si una operación esta en perdidas y llama a la función NewStep
int CheckNewStep()
{
   ulong lTicket=0;
   ulong lMagic=0;
   double dpricestep=0.0;
   double dnewprice=0.0;
   double dTP=0.0;
   double dNewTP=0.0;
   double dSL=0.0;
   double dCommOpen=0;
   double dPipStep=0;
   double dPriceNow=0;
   ulong lstep=0;
   string scoment="";
   ulong sLateralStep;
   // Coger el parámetro que ha seleccionado el usuario
   sLateralStep=GetLateralStep();
   // No saturar el alert del bot
   datetime dNow=TimeCurrent();
   // Control de  comisión
   dCommOpen+=(iComisionPips*pips);
   ENUM_POSITION_TYPE TYPE_POS=POSITION_TYPE_BUY;
   /////////// for(int i=0;i<PositionsTotal();i++) // returns the number of current positions
   for(int i=0;i<9;i++) // returns the number of current positions
   {
      // Sólo trabajar con el tiket edge.
      lTicket=GetEdgeThread(i);
      if(lTicket<=0) continue;
      if(!cPos.SelectByTicket(lTicket))
      {
         Print("Error al seleccionar orden. Error = ",GetLastError());
         return -1;
      }
      if(_Symbol!=cPos.Symbol()) continue;
      // Si Esta en positivo siguiente
      if(cPos.Profit()>0 ) continue;
      dPriceNow=cPos.PriceCurrent();
      dSL=cPos.StopLoss();
      /// PARA NUEVA FUNCION SOLO TRABAJAR CON SL=0
      if(dSL!=0) continue;
      // Check Bot
      // Comprobar cobertura. Volver a cargar cPos porque la función carga el resto de tickets
      TYPE_POS=cPos.PositionType();
      dpricestep = cPos.PriceOpen();
      // Obtener TP
      dTP=cPos.TakeProfit();
      lstep=GetStep();
      ///////////////////////////////////////////////////////////////////////
      // Control Modo lateral. Activarlo y pasar a siguiente hilo si todavia hay q entrar por martingala2
      if(lstep>=sLateralStep)
      {
         enumbotmode=LATERAL_MODE;
         continue;
      }
      // Calcular SL
      dNextScalp=GetSLStep(lstep,TYPE_POS);
      // Volver a cargar en cPos el ticket actual
      if(!cPos.SelectByTicket(lTicket))
      {
         Print("Error al seleccionar orden. Error = ",GetLastError());
         return -1;
      }
      lstep+=1;
      lMagic=cPos.Magic();
      // Comentario Nuevo step
      // COMENTARIO MAX 32 CHAR
      scoment=cPos.Comment();
      StringReplace(scoment,": "+IntegerToString(lstep-1),": "+IntegerToString(lstep));   
      // Dependiendo tipo de posición
      if(TYPE_POS==POSITION_TYPE_SELL)
      {
         // Original Venta
         if(dPriceNow<dNextScalp) continue;
         dnewprice=NormalizeDouble(SymbolInfo.Bid(),Digits());         
         // 1 Generar nueva posción en dir contraria
         dNewTP=MathAbs(dpricestep-dnewprice);
         dNewTP=NormalizeDouble(dnewprice+dNewTP+dCommOpen+(iFrancisca*2.5*pips),Digits());
         // Comprobar precio en zona verce
         dNewTP=GetGreenPrice(dNewTP,POSITION_TYPE_BUY);
         dSL=NewStep(dNewTP,lstep,scoment,POSITION_TYPE_BUY,lMagic);
         // Continue si NewStep es 0
         if(dSL==0) continue;
         // Asignar el numero mágico 
         cTrade.SetExpertMagicNumber(lMagic);
         // Para saber la cobertura SL = TP de la nueva
         // 2 Poner SL de posición con problemas
         if(!cTrade.PositionModify(lTicket,dSL,dTP))
         {
            vtext="Error al actualizar CheckNewStep en ticket "+IntegerToString(cPos.Ticket())+" error:"+IntegerToString(GetLastError());
            ENUMTXT = PRINT;
            expertLog();
            return -1;
         }
      }
      else
      {
         // Original Compra
         if(dPriceNow>dNextScalp) continue;
         dnewprice=NormalizeDouble(SymbolInfo.Ask(),Digits());   
         // 1 Generar nueva posción
         dNewTP=MathAbs(dpricestep-dnewprice);
         dNewTP=NormalizeDouble(dnewprice-dNewTP-dCommOpen-(iFrancisca*2.5*pips),Digits());
         dNewTP=GetGreenPrice(dNewTP,POSITION_TYPE_SELL);
         dSL=NewStep(dNewTP,lstep,scoment,POSITION_TYPE_SELL,lMagic);
         // Continue si NewStep es 0
         if(dSL==0) continue;
         // Asignar el numero mágico 
         cTrade.SetExpertMagicNumber(lMagic);
         // Para saber la cobertura SL = TP de la nueva
         // 2 Poner SL de posición con problemas
         if(!cTrade.PositionModify(lTicket,dSL,dTP))
         {
            vtext="Error al actualizar CheckNewStep en ticket "+IntegerToString(cPos.Ticket())+" error:"+IntegerToString(GetLastError());
            ENUMTXT = PRINT;
            expertLog();
            return -1;
         }            
      }     
   }
   // Bien
   return 1;
}

ulong GetLateralStep()
{
   ulong lstep=99;
   switch(ENUMLATERAL)
   {
      case STEP_2:
         lstep=2;
         break;
      case STEP_3:
         lstep=3;
         break;
      case STEP_4:
         lstep=4;
         break;
   }
   return lstep;
}

double NewStep(double newTP,ulong lstep,string scoment,ENUM_POSITION_TYPE TYPE_POS,ulong lMagic)
{
   double LotStep=0.0;
   double dLotadd=0.0;
   double dSwap=0.0;
   double dSL = 0.00;
   double dTP = 0.00;

   // Tamaño del lote
   LotStep=cPos.Volume();
   dLotadd=Lots*iCent; 
   // Control de lote 
   LotStep=NormalizeDouble((cPos.Volume()*2)+dLotadd, lotdecimal);
   // Asignar el numero mágico 
   cTrade.SetExpertMagicNumber(lMagic); 
   switch(TYPE_POS)
   {
      case POSITION_TYPE_SELL:
         // Control de SWAP
         if(SymbolInfo.SwapShort()<0)dSwap=4;
         dTP=newTP-(dSwap*pips);
         if(!cTrade.Sell(LotStep,_Symbol,0,dSL,dTP,scoment))
         {
            vtext="Se ha producido el error "+IntegerToString(GetLastError())+" al abrir una operación de "+DoubleToString(LotStep)+".";
            ENUMTXT = PRINT;
            expertLog();
            return -1;
         }
         vtext=scoment+".Tamaño lote:"+DoubleToString(LotStep)+".";
         break;  
      case POSITION_TYPE_BUY:
         // Control de SWAP
         if(SymbolInfo.SwapLong()<0)dSwap=4;
         dTP=newTP+(dSwap*pips);
         if(!cTrade.Buy(LotStep,_Symbol,0,dSL,dTP,scoment))
         {
            vtext="Se ha producido el error "+IntegerToString(GetLastError())+" al abrir una operación de "+DoubleToString(LotStep)+".";
            ENUMTXT = PRINT;
            expertLog();
            return -1;
         }
         vtext=scoment+".Tamaño lote:"+DoubleToString(LotStep)+".";
         break;
   }
   ENUMTXT = PRINT;
   expertLog();
   // Contar ops.
   if(countbot()<0) return -1;
   // Bien
   return dTP;
}
//              ------------------------------------------------------------------------------------------------------------------- //
//              ------------------------------------------- MATRINGALA2 CODE ------------------------------------------------------ //
//              ------------------------------------------------------------------------------------------------------------------- //

// //
// ------------------------------------------- HIGHTRENDBOT CODE ------------------------------------------------------ //
// ------------------------------------------------------------------------------------------------------------------- //
// Check last bars and return Order type if there are high market moviment. More than (3*TP/2)
ENUM_POSITION_TYPE CheckHighTrend()
{
   ENUM_POSITION_TYPE TYPE_POS=WRONG_VALUE;
   // Check last bars
   int iBear=0;
   int iBull=0;
   // Almenos 2TP de dirección
   ///if(MathAbs(rLastBars[0].open-rLastBars[ArraySize(rLastBars)-1].close)<(TakeProfit*2*pips))
	///{
	 ///  vtext="Tamaño de la barras menor TP * 2";
	///   return TYPE_POS;
	///}
   for(int i=0;i<ArraySize(rLastBars);i++)
   {
   	// Check si es menor 50%
   	if(MathAbs(rLastBars[i].open-rLastBars[i].close)<(TakeProfit*0.5*pips))
   	{
   	   vtext="Tamaño de la barra menor al 50% del TP";
   	   return TYPE_POS;
   	}
   	if(rLastBars[i].open>rLastBars[i].close)
   	{
   	   iBear+=1;
   	}
   	else
   	{
   	   iBull+=1;
   	}
   }
   // Controlar si es BULL o BEAR
   if(iBull>ArraySize(rLastBars)-1)
   {
      TYPE_POS=POSITION_TYPE_BUY;
   }
   if(iBear>ArraySize(rLastBars)-1)
   {
      TYPE_POS=POSITION_TYPE_SELL;
   }
   //Return value
   return TYPE_POS;
}

bool ActivateHighTrend()
{
   bool bactivate=false;
   ulong lstep=0;
   
   // Confirmar que el hilo máximo está ocupado
   if(ATRENDBOT[iMaxThead-1]==0)
   {              
      vtext="Aun existen hilos disponibles.";
      ENUMTXT = PRINT;
      //expertLog();
      return bactivate;
   }
   // Confirmar que el hilo HighTrend no esta ocupado
   if(ATRENDBOT[iMaxThead]!=0)
   {              
      vtext="HighTrend ya fue activado.";
      ENUMTXT = PRINT;
      //expertLog();
      return bactivate;
   }   
   // Return
   bactivate=true;
   return bactivate;
}

void OpenHighTrend()
{
   double TP0=0.0;
   ulong lmaxstep=0;
   double dLotOpen=Lots;
   double dCommOpen=0.0;
   double dAddSpread=0.00;
   datetime dNow=TimeCurrent();
   string scoment="";
   int iHighSpread=(iMaxSpread*2);
   //Recalc CENT
   dLotOpen=dLotOpen*iCent;
   ENUM_POSITION_TYPE TYPE_POS=WRONG_VALUE;
   // Control de modo lateral para no abrir más
   if(enumbotmode==LATERAL_MODE)
   {
      vtext="Desactivado HighTrend con modo lateral activado.";
      ENUMTXT = PRINT;
      //expertLog();      
      return;
   }
   
// Si hay mucho movimiento salirse
   if(iHighSpread < SymbolInfo.Spread())
   {
      vtext="El Spread actual "+IntegerToString(SymbolInfo.Spread())+" es superior al máximo configurado en el robot.";
      ENUMTXT = PRINT;
      expertLog();
      return;   
   } 
   // Comprobar si se puede abrir.
   if(ActivateHighTrend()==false)
   {
      return;
   }
   TYPE_POS=CheckHighTrend();
   if(TYPE_POS==WRONG_VALUE)
   {
	  vtext="La dirección del mercado es insuficiente para crear HIGHTRENDBOT.";
      ENUMTXT = PRINT;
      //expertLog();
      return;   
   }
//--- additional checking
   if(TerminalInfoInteger(TERMINAL_TRADE_ALLOWED))
   {
      // Control de licencias por suscripción
      if(CheckSilverEnd()==0) return;
      // Control maximo de hilos
      
      // Añadir hilo adicional. El máximo de parámetro +1.
      ATRENDBOT[iMaxThead]=MAGICTREND+iMaxThead;
      // Reset contador de beneficios
      ATRENDPROFIT[iMaxThead]=Cacc.Balance();
      
      // Peso del Spread añadir al SL
      dAddSpread=MathAbs(SymbolInfo.Bid()-SymbolInfo.Ask());
      if(dAddSpread>(iFrancisca*pips)) dAddSpread=iFrancisca*pips;
      // Control de comisión
      dCommOpen+=iComisionPips;
	  // Asignar el numero mágico
      cTrade.SetExpertMagicNumber(ATRENDBOT[iMaxThead]);
      // COMENTARIO MAX 32 CHAR
      scoment=GetTCode();
      scoment="H"+BOTNAME+" ("+scoment+") : 0";
      switch(TYPE_POS)
      {
         case POSITION_TYPE_SELL:
            // Control de SWAP
            if(SymbolInfo.SwapShort()<0)dCommOpen+=4;
            TP0=SymbolInfo.Bid()-(TakeProfit*pips)-(dCommOpen*pips)-dAddSpread;
            if(!cTrade.Sell(dLotOpen,_Symbol,0,0,TP0,scoment))
            {
               vtext="Se ha producido el error "+IntegerToString(GetLastError())+" al abrir una operación de "+DoubleToString(Lots)+".";
               ENUMTXT = PRINT;
               expertLog();
            }
            break;  
         case POSITION_TYPE_BUY:
            // Control de SWAP
            if(SymbolInfo.SwapLong()<0)dCommOpen+=4;
            TP0=SymbolInfo.Ask()+(TakeProfit*pips)+(dCommOpen*pips)+dAddSpread;
            if(!cTrade.Buy(dLotOpen,_Symbol,0,0,TP0,scoment))
            {
               vtext="Se ha producido el error "+IntegerToString(GetLastError())+" al abrir una operación de "+DoubleToString(Lots)+".";
               ENUMTXT = PRINT;
               expertLog();
            } 
            break;
      }
      // Reset contador de beneficios
      
      vtext="Gran tendencia detectada : "+EnumToString(TYPE_POS)+" . "+scoment;
      ENUMTXT = PRINT;
      expertLog();
      // Contar ops.
      countbot();
      return;           
   }
}

//              ------------------------------------------------------------------------------------------------------------------- //
//              ------------------------------------------- HIGHTRENDBOT CODE ------------------------------------------------------ //
//              ------------------------------------------------------------------------------------------------------------------- //

// ------------------------------------------------------------------------------------------------------------------- //
// ------------------------------------------- FRANCISCADA CODE ------------------------------------------------------ //
// ------------------------------------------------------------------------------------------------------------------- //
short goFrancisca()
{
   // Coger las posiciones del symbolo y de los nº mágicos reservados
   ENUM_POSITION_TYPE TYPE_POS;
   double Dprice=0;
   double dOpen=0;
   double dOldTP=0;
   double dOldSL=0;
   double DnewTP=0.0;
   double DnewSL=0.0;
   ulong lTicketAnt=0;
   ulong lTicket=0;
   long lmagic=0;
   int ipos=0;

   //Asignar Franciscada
   switch(enumfrancisca)
   {
      case SIN_FRANCISCA:
         iFrancisca=0;
         break;
      case FRANCISCA_10:
         iFrancisca=10;
         break;
      case FRANCISCA_20:
         iFrancisca=20;
         break;
   }
   // Recorrer todas las posiciones
   for(int i=0;i<PositionsTotal();i++) // returns the number of current positions
   {
      if(!cPos.SelectByIndex(i))
      {
         vtext="Error al seleccionar orden función francisca. Error = "+IntegerToString(GetLastError());
         ENUMTXT = PRINT;
         expertLog();
         continue;
      }
     // vtext="Check Franciscada called for.";
      //ENUMTXT = PRINT;
      //expertLog();
      lTicket=cPos.Ticket();
      lmagic=cPos.Magic();
      if (_Symbol==cPos.Symbol() && (IsMyMagic(lmagic)>0))
      {
         TYPE_POS=cPos.PositionType();
         ipos=(int)(cPos.Magic()-MAGICTREND);
         dOpen=cPos.PriceOpen();
         dOldSL=cPos.StopLoss();
         dOldTP=cPos.TakeProfit();
         Dprice=cPos.PriceCurrent();
         // Comprobar si esta cerca del SLMax para no hacer nada
         DnewSL=GetSLMax();
         if(MathAbs(dOldSL==DnewSL)) continue;
         if(TYPE_POS==POSITION_TYPE_SELL)
         {
            DnewSL=dOpen-(TakeProfit*pips);
            // Mision cumplida. Nueva misión
            if((dOldSL>0) && (dOldSL<DnewSL))
            {
               // Resto de cambios
               DnewSL=NormalizeDouble((dOldSL-(iFrancisca*pips)),Digits());
               ///DnewTP=NormalizeDouble(Dprice-(iFrancisca*2*pips),Digits());
               // Nueva misión
               DnewTP=NormalizeDouble(Dprice-(TakeProfit*pips),Digits());
            }
            else
            {
               // Primer cambio
               DnewSL=NormalizeDouble((Dprice+(iFrancisca*pips)),Digits());
               DnewTP=NormalizeDouble(Dprice-(iFrancisca*pips),Digits());
            }
            
            // Control mínimo SL por debajo de precio
            if(DnewSL<Dprice) DnewSL=NormalizeDouble((Dprice+(iFrancisca*pips)),Digits());  
         }
         else  //// BUY
         {
            DnewSL=dOpen+(TakeProfit*pips);
            if(dOldSL>DnewSL)
            {
               // Resto de cambios
               DnewSL=NormalizeDouble((dOldSL+(iFrancisca*pips)),Digits());
               ////DnewTP=NormalizeDouble((Dprice+(iFrancisca*2*pips)),Digits());
               // Nueva misión
               DnewTP=NormalizeDouble((Dprice+(TakeProfit*pips)),Digits());
            }
            else
            {
               // Primer cambio
               DnewSL=NormalizeDouble((Dprice-(iFrancisca*pips)),Digits());
               DnewTP=NormalizeDouble((Dprice+(iFrancisca*pips)),Digits());
            } 
            // Control mínimo SL por debajo de precio
            if(DnewSL>Dprice) DnewSL=NormalizeDouble((Dprice-(iFrancisca*pips)),Digits());
         }
         // Si hay que actualiar por tp de la posición
         if(MathAbs(Dprice-dOldTP)<(iFrancisca*pips))
         { 
            // Actualizar Posicion
            if(!cTrade.PositionModify(lTicket,DnewSL,DnewTP))
            {
               vtext="Error al actualizar Franciscada en ticket "+IntegerToString(cPos.Ticket())+" error:"+IntegerToString(GetLastError());
               ENUMTXT = PRINT;
               expertLog();
               return -1;
            }
            // Matar ticket anteriores y del mismo step menos este
            if(FrancisKillThread(dOldTP)<0) return -1;
            vtext="Actalización Franciscada en ticket "+IntegerToString(cPos.Ticket())+" Nuevo SL:"+DoubleToString(DnewSL)+", TP:"+DoubleToString(DnewTP)+".";
            ENUMTXT = PRINT;
            expertLog();
         }
      }  
   }
   // Franciscada finalizada
   return 1;
}
// Funtion will be kill previous op of Franciscana triggered correctly
// Cerrar tiket contrarios al q proboco el kill
short FrancisKillThread(double dTP)
{
   // Recorrer todo el hilo, cerrar tiket de step -1 y step menos el de francisca.
   ulong lticket=0;
   double dSL=0;
   int ithread=0;
   // Coger el el hilo
   ithread=(int)cPos.Magic()-MAGICTREND;
   for(int ipos=0;ipos<99;ipos++) // recorrer dimesion pos
   {
      if(ATREND[ithread][ipos]==0)
      {
         // Final de hilo
         ipos=99;
      }
      else
      {
         lticket=ATREND[ithread][ipos];
         if(!cPos.SelectByTicket(lticket))
         {
            vtext="Error al seleccionar orden función FrancisKill. Error = "+IntegerToString(GetLastError());
            ENUMTXT = PRINT;
            expertLog();
            return -1;
         }
         dSL=cPos.StopLoss();
         // Si está aqui es para cerrar.SL=TP
         if(_Symbol==cPos.Symbol() && dSL==dTP)
         {   
            if(!cTrade.PositionClose(lticket))
            {
               vtext="Error en FrancisKill cerrar el ticket "+IntegerToString(cPos.Ticket())+" error:"+IntegerToString(GetLastError());
               ENUMTXT = PRINT;
               expertLog();
               return -1;
            }
            vtext="FrancisKill realizado.Ticket cerrado: "+IntegerToString(lticket);
            ENUMTXT = PRINT;
            expertLog();   
         }
      }

   }
   // Bien
   return 1;
}


// Se le pasa el ticket localizado en función francisca
short FrancisKill(ulong lticket)
{
   long lmagic;
   if(!cPos.SelectByTicket(lticket))
   {
      vtext="Error al seleccionar orden función FrancisKill. Error = "+IntegerToString(GetLastError());
      ENUMTXT = PRINT;
      expertLog();
      return -1;
   }
   lmagic=cPos.Magic();

   if(_Symbol==cPos.Symbol())
   {   
      if(!cTrade.PositionClose(lticket))
      {
         vtext="Error en FrancisKill cerrar el ticket "+IntegerToString(cPos.Ticket())+" error:"+IntegerToString(GetLastError());
         ENUMTXT = PRINT;
         expertLog();
         return -1;
      }
   }
   vtext="FrancisKill realizado.Ticket cerrado: "+IntegerToString(lticket);
   ENUMTXT = PRINT;
   expertLog();       
   // FrancisKill finalizada
   return 1;
}

// Contar dirección ultimas barras
int CheckBarCont()
{
   int icont=0;
   for(int i=0;i<ArraySize(rLastBars);i++)
   {
   	if(rLastBars[i].open>rLastBars[i].close)
   	{
   	   icont-=1;
   	}
   	else
   	{
   	   icont+=1;
   	}
   }
   // Return dir
   return icont;
}    
//              ------------------------------------------------------------------------------------------------------------------- //
//              ------------------------------------------- FRANCISCADA CODE ------------------------------------------------------ //
//              ------------------------------------------------------------------------------------------------------------------- //

// ------------------------------------------------------------------------------------------------------------------- //
// ---------------------------------------------- LATERAL CODE ------------------------------------------------------- //
// ------------------------------------------------------------------------------------------------------------------- //
ulong GetEdgeThread(int ithread)
{
   ulong lEdge=0;
   for(int ipos=0;ipos<99;ipos++) // recorrer dimesion pos
   {
      if(ATREND[ithread][ipos]==0)
      {
         ipos=99;
      }
      else
      {
         lEdge=ATREND[ithread][ipos];
      }
   }
   return lEdge; 
}

// Retorna la diferencia de lotaje del hilo
double GetLotDiffThread(int ithread)
{
   // 
   ulong ltiket = 0;
   double dBULL=0;
   double dBear=0;
   for(int ipos=0;ipos<99;ipos++) // recorrer dimesion pos
   {
      if(ATREND[ithread][ipos]==0)
      {
         ipos=99;
      }
      else
      {
         ltiket=ATREND[ithread][ipos];
         if(!cPos.SelectByTicket(ltiket))
         {
            vtext="Error en GetLotDiffThread seleccionado ticket "+IntegerToString(ltiket)+". Últmo error encontrado:"+IntegerToString(GetLastError())+".No se evaluará.";
            ENUMTXT = PRINT;
            expertLog();
            continue;
         }
         if(cPos.Type()==POSITION_TYPE_BUY)
         {
            dBULL+=cPos.Volume();
         }
         else
         {
            dBear+=cPos.Volume();
         }
      }
   }
   // retornar el valor +-0
   dBULL=dBULL-dBear;
   return dBULL;
}
// Retornar el precio del max edge por tipo
double CheckPrevOp(int ithread,ENUM_POSITION_TYPE TYPE_POS)
{
   double dlastprice=0;
   if(TYPE_POS==POSITION_TYPE_BUY)
   {
      dlastprice=AMAXBULL[ithread];
   }
   else
   {
      dlastprice=AminBear[ithread];
   }
   
   // Bien
   return dlastprice;
}

// Función recorre los edge laterales. Si tiene SL en ganancias, crear nuevo edge, si se va mas de 3.5TP Cambio dir edge
short CheckLateralEdges()
{
   ulong ltiket = 0;
   ulong lmagic=0;
   ulong lstep = 0;
   double dOpen = 0.00;
   double dSL = 0.00;
   double dTP = 0.00;
   double dProfit=0;
   double dMinPips=0;
   double dNowPips=0;
   double dPriceNow = 0.00;
   double dLastDir = 0.00;
   ulong sLateralStep;
   // Coger el parámetro que ha seleccionado el usuario
   sLateralStep=GetLateralStep();
   ENUM_POSITION_TYPE TYPE_POS=POSITION_TYPE_BUY;
   // Recorrer el Array de MAX
   for(int i=0;i<9;i++) 
   {
      // Control de cierre en ganancias
      if(CheckThreadProfit(i)!=0) continue;
      ltiket=GetEdgeThread(i); 
      if(ltiket<=0) continue;
      if(!cPos.SelectByTicket(ltiket))
      {
         vtext="Error en CheckLateralEdges seleccionado ticket "+IntegerToString(ltiket)+". Últmo error encontrado:"+IntegerToString(GetLastError())+".No se evaluará.";
         ENUMTXT = PRINT;
         expertLog();
         continue;
      }
      // Check if the bot is in the correct mode
      lmagic=cPos.Magic();
      lstep=GetStep();
      if(lstep>=sLateralStep) enumbotmode=LATERAL_MODE;
      if(enumbotmode!=LATERAL_MODE) continue;
      if(_Symbol!=cPos.Symbol()) continue;
      TYPE_POS=cPos.PositionType();
      dOpen=cPos.PriceOpen();
      dSL=cPos.StopLoss();
      dPriceNow=cPos.PriceCurrent();
      dProfit=cPos.Profit();
      dMinPips=(TakeProfit*4*pips);
      dNowPips=MathAbs(dOpen-dPriceNow);
      // Si esta en perdidas 3TP abrir ticket en la dirección contraria
      if(dNowPips>dMinPips && dProfit<0)
      {
         // Actualizar TP de posición con problemas. Cerrar por SL o por TP
         dTP=GetTPBreakEvent(TYPE_POS);
         vtext="Crear dir contraria.";
         if(TYPE_POS==POSITION_TYPE_BUY)
         {
            TYPE_POS=POSITION_TYPE_SELL;
            dLastDir=CheckPrevOp(i,TYPE_POS);
            // Control de valor actual por debajo de op anterior
            if(dLastDir<=0) dLastDir=dPriceNow;
            if(dLastDir<dPriceNow) continue;
         }
         else
         {
            TYPE_POS=POSITION_TYPE_BUY;
            dLastDir=CheckPrevOp(i,TYPE_POS);
            // Control de valor actual por encima de op anterior
            if(dLastDir>dPriceNow) continue;
         }
         // Control de apertura por debajo de valor anterior
         
         //Crear nuevo edge contrario
         if(gravityZero(TYPE_POS,lmagic)<0) continue;
         // El último step no puede tener SL
         if(!cTrade.PositionModify(ltiket,0,dProfit))
         {
            vtext="Error en CheckLateralEdges actualizar SL a "+DoubleToString(0)+" en ticket "+IntegerToString(ltiket)+"(Ant "+DoubleToString(cPos.StopLoss())+") error:"+IntegerToString(GetLastError());
            ENUMTXT = PRINT;
            expertLog();
            continue;
         }    
      }
      // Si está en ganacias y con TP crear nuevo edge en la misma dir
      if(dSL>0 && dProfit>0)
      {
         //Crear nuevo edge en la misma dir
         // Abrir MaxOP
         if(NewStepLateral(TYPE_POS,lmagic)<0) continue;
      }
   }   
   // Bien
   return 1;
}
/// Comprobar mercado en dierección correcta    <------------------------ PENDIENTE
short NewStepLateral(ENUM_POSITION_TYPE TYPE_POS,ulong lmagic)
{
   ulong lStep=0;
   double dLotOpen=0;
   string scoment;
   lStep=GetStep();
   lStep+=1;
   // Comentario Nuevo step
   // COMENTARIO MAX 32 CHAR
   scoment=cPos.Comment();
   StringReplace(scoment,": "+IntegerToString(lStep-1),": "+IntegerToString(lStep));   
   ///dLotOpen=cPos.Volume()+(Lots*iCent);
   dLotOpen=cPos.Volume();
   // Asignar el numero mágico de ventas   
   cTrade.SetExpertMagicNumber(lmagic); 
   switch(TYPE_POS)
   {
      case POSITION_TYPE_SELL:
         if(!cTrade.Sell(dLotOpen,_Symbol,0,0,0,scoment))
         {
            vtext="Se ha producido el error "+IntegerToString(GetLastError())+" al abrir una operación de "+DoubleToString(lStep)+".";
            ENUMTXT = PRINT;
            expertLog();
            return -1;
         }
         vtext=scoment+".Tamaño lote:"+DoubleToString(lStep)+".";
         break;  
      case POSITION_TYPE_BUY:
         if(!cTrade.Buy(dLotOpen,_Symbol,0,0,0,scoment))
         {
            vtext="Se ha producido el error "+IntegerToString(GetLastError())+" al abrir una operación de "+DoubleToString(lStep)+".";
            ENUMTXT = PRINT;
            expertLog();
            return -1;
         }
         vtext=scoment+".nuevo step lateral tipo "+EnumToString(TYPE_POS)+".";
         break;
   }
   ENUMTXT = PRINT;
   expertLog();
   // Bien
   return 1;
}

short gravityZero(ENUM_POSITION_TYPE TYPE_POS,ulong lmagic)
{
   ulong lStep=0;
   double dLotOpen=0;
   string scoment;
   int ithread=0;
   lStep=GetStep();
   lStep+=1;
   // Comentario Nuevo step
   // COMENTARIO MAX 32 CHAR
   scoment=cPos.Comment();
   StringReplace(scoment,": "+IntegerToString(lStep-1),": "+IntegerToString(lStep));   
   ///dLotOpen=cPos.Volume()+(Lots*iCent);
   ithread=(int)(cPos.Magic()-MAGICTREND);
   dLotOpen=MathAbs(GetLotDiffThread(ithread));
   // Asignar el numero mágico de ventas   
   cTrade.SetExpertMagicNumber(lmagic); 
   switch(TYPE_POS)
   {
      case POSITION_TYPE_SELL:
         if(!cTrade.Sell(dLotOpen,_Symbol,0,0,0,scoment))
         {
            vtext="Se ha producido el error "+IntegerToString(GetLastError())+" al abrir una operación de "+DoubleToString(lStep)+".";
            ENUMTXT = PRINT;
            expertLog();
            return -1;
         }
         vtext=scoment+".Tamaño lote:"+DoubleToString(lStep)+".";
         break;  
      case POSITION_TYPE_BUY:
         if(!cTrade.Buy(dLotOpen,_Symbol,0,0,0,scoment))
         {
            vtext="Se ha producido el error "+IntegerToString(GetLastError())+" al abrir una operación de "+DoubleToString(lStep)+".";
            ENUMTXT = PRINT;
            expertLog();
            return -1;
         }
         vtext=scoment+".nuevo step lateral tipo "+EnumToString(TYPE_POS)+".";
         break;
   }
   ENUMTXT = PRINT;
   expertLog();
   // Bien
   return 1;
}

// Max step Witch SL allway OK
short SetSLMax()
{
   double dOpen = 0.00;
   double dSL = 0.00;
   double dTP = 0.00;
   double dMinPips=0;
   double dNowPips=0;
   double dPriceNow = 0.00;
   ulong ltiket = 0;
   ulong lStep=0;
   ulong lMagic=0;
   double dMulti=0;
   ulong sLateralStep;
   // Coger el parámetro que ha seleccionado el usuario
   sLateralStep=GetLateralStep();
   ENUM_POSITION_TYPE TYPE_POS=POSITION_TYPE_BUY;
   // Recorrer el Array de MAX
   for(int i=0;i<PositionsTotal();i++)
   //////////////////////////////////////////////////////for(int i=0;i<9;i++) 
   {
      // ltiket=GetEdgeThread(i);
      // if(ltiket<=0) continue;
      // if(!cPos.SelectByTicket(ltiket))
      dMulti=3.5;
      if(!cPos.SelectByIndex(i))
      {
         vtext="Error en SetSLMax seleccionado ticket "+IntegerToString(i)+". Últmo error encontrado:"+IntegerToString(GetLastError())+".No se evaluará.";
         ENUMTXT = PRINT;
         expertLog();
         continue;
      }
      if(_Symbol!=cPos.Symbol()) continue;
      if(cPos.Profit()<0) continue;
      lStep=GetStep();
      // Sólo si tiene SL
      dOpen=cPos.PriceOpen();
      TYPE_POS=cPos.PositionType();
      // Control que no sea la última op
      lMagic=cPos.Magic();
      // Control lateral mode
      if(lStep>=sLateralStep) 
      {
         dMulti=2.5;
      }
      ltiket=cPos.Ticket();
      dPriceNow=cPos.PriceCurrent();
      // Calc pips min.
      dMinPips=(TakeProfit*dMulti*pips);
      dNowPips=MathAbs(dOpen-dPriceNow);
      if(dMinPips>dNowPips) continue;      
      // Si la dir de las barras es buy y el precio aun esta debajo del open realizar un SetSLMax
      if(TYPE_POS==POSITION_TYPE_SELL)
      {
         if(dOpen>dSL && dSL>0) continue;
      }
      // Si la dir de las barras es sell y el precio aun esta por encima del open realizar un SetSLMax
      if(TYPE_POS==POSITION_TYPE_BUY)
      {
         if(dOpen<dSL) continue;
      }
      // Get price for SLMax
      dSL=GetSLMax();
      if(dSL!=cPos.StopLoss())
      {
         // El último step no puede tener SL
         if(!cTrade.PositionModify(ltiket,dSL,cPos.TakeProfit()))
         {
            vtext="Error en SetSLMax actualizar SL a "+DoubleToString(dSL)+" en ticket "+IntegerToString(cPos.Ticket())+"(Ant "+DoubleToString(cPos.StopLoss())+") error:"+IntegerToString(GetLastError());
            ENUMTXT = PRINT;
            expertLog();
            continue;
         }
         vtext="SetSLMax ticket "+IntegerToString(ltiket)+" ha actualizado SL a "+DoubleToString(dSL)+".";
         ENUMTXT = PRINT;
         expertLog();
      }            
   }
   // Bien
   return 1;   
}
// Retorna a función francisca que la op tiene activada SLMax
double GetSLMax()
{
   double dOpen=0.00;
   double dSL=0.00;
   ENUM_POSITION_TYPE TYPE_POS;
   TYPE_POS=cPos.PositionType();
   dOpen=cPos.PriceOpen();
   dSL=cPos.StopLoss();
   if(TYPE_POS==POSITION_TYPE_SELL)
   {
      dOpen=NormalizeDouble(dOpen-((TakeProfit/2)*pips),Digits());
   }
   else
   {
      dOpen=NormalizeDouble(dOpen+((TakeProfit/2)*pips),Digits());
   }
   // Retornar precio de SL
   return dOpen;
}

// Coger valor del comentario
double GetProfitComment(int ithread)
{
   double dProfit=0;
   int iposini=0;
   int iposend=0;
   string scomment="";
   // Cargar primera operación de array
   if(!cPos.SelectByTicket(ATREND[ithread][0]))
   {
      vtext="Error en GetProfitComment seleccionado ticket "+IntegerToString(ATREND[ithread][0])+". Últmo error encontrado:"+IntegerToString(GetLastError())+".No se evaluará.";
      ENUMTXT = PRINT;
      expertLog();
      return -1;
   }
   scomment=cPos.Comment();
   iposini=StringFind(scomment,"(",0);
   if(iposini<0) return -1;
   iposini+=1;
   iposend=StringFind(scomment,")",iposini);
   iposend=iposend-iposini;
   if(iposend<0) return -1;
   scomment=StringSubstr(scomment,iposini,iposend);
   dProfit=StringToDouble(scomment);
   if(dProfit<=0) return -1;
   return dProfit;
}

// Funtion EXIT PROFIT THREAD
short CheckThreadProfit(int ithread)
{
   double dhandicap=0;
   ulong lticket=0;
   dhandicap=-1;
   // Si el bot se ha reseteado
   if(ATRENDPROFIT[ithread]==0)
   //if(ATRENDPROFIT[ithread]>0) // Test funtion
   {
      ATRENDPROFIT[ithread]=GetProfitComment(ithread);
   }
   // Recorrer hilo de operaciones para ir sumando los handicap
   for(int i=0;i<99;i++)
   {
      lticket=ATREND[ithread][i];
      if(lticket==0)
      {
         i=99;
         // Ya tengo todos los hadicap
         dhandicap=Cacc.Equity()+dhandicap;
         if(dhandicap>ATRENDPROFIT[ithread])
         {
            return CloseThisThread(ithread);
         }
      }
      else
      {   
         if(!cPos.SelectByTicket(lticket))
         {
            vtext="Error en CheckThreadProfit seleccionado ticket "+IntegerToString(lticket)+". Últmo error encontrado:"+IntegerToString(GetLastError())+".No se evaluará.";
            ENUMTXT = PRINT;
            expertLog();
            continue;
         }
         dhandicap+=getComisionPos();
         dhandicap+=cPos.Swap();
         // Por cada op 1€
         dhandicap-= 1;
      }        
   }
   // Bien
   return 0;  
}
// Cerrar hilo. Todo menos el ticket actual
short CloseThisThread(int ithread)
{
   // Recorrer todas las posiciones
   double dProfit=0;
   dProfit=Cacc.Equity()-ATRENDPROFIT[ithread];
   ulong lticket=0;
   for(int i=0;i<99;i++)
   {
      lticket=ATREND[ithread][i];
      if(lticket==0)
      {
         // Finalizados Hilo
         vtext="Hilo cerrado "+IntegerToString(cPos.Magic())+" con ganancias: "+DoubleToString(dProfit,2)+Cacc.Currency()+"." ;
         ENUMTXT = PRINT;
         expertLog();
         return 1; 
      }
      if(!cPos.SelectByTicket(lticket))
      {
         vtext="Error al seleccionar orden función CloseThisThread. Error = "+IntegerToString(GetLastError());
         ENUMTXT = PRINT;
         expertLog();
         continue;
      }
      if(_Symbol==cPos.Symbol())
      {   
         lticket=cPos.Ticket();
         if(!cTrade.PositionClose(lticket))
         {
            vtext="Error en CloseThisThread cerrar el ticket "+IntegerToString(lticket)+" error:"+IntegerToString(GetLastError());
            ENUMTXT = PRINT;
            expertLog();
            return -1;
         }
      }
   }
   // Bien
   return 1;
}
//              ------------------------------------------------------------------------------------------------------------------- //
//              ----------------------------------------------- LATERAL CODE ------------------------------------------------------ //
//              ------------------------------------------------------------------------------------------------------------------- //

// ------------------------------------------------------------------------------------------------------------------- //
// ------------------------------------------- BREAKEVENT CODE ------------------------------------------------------- //
// ------------------------------------------------------------------------------------------------------------------- //
// Se le pasa el ticket original para marcar todas las coberturas de ese ticket
short CheckBreakEvent()
{
   // Si no tiene SL es la superior guardarla para cuando se pueda.
   ulong lTicketProc=0;
   double dprice = 0.00;
   double DSL = 0.00;
   double DnewTP = 0.00;
   double dLotOpen=Lots*iCent;
   ENUM_POSITION_TYPE TYPE_POS;
   for(int i=0;i<PositionsTotal();i++) // returns the number of current positions
   {
      if(!cPos.SelectByIndex(i))
      {
         Print("Error al seleccionar orden. Error = ",GetLastError());
         return -1;
      }
      lTicketProc=cPos.Ticket();
      // No hacer con STEP 0
      if(cPos.Volume()<=dLotOpen) continue;
      // Si no está en ganancias siguiente
      if(cPos.Profit()<0) continue;
      // Comprobar que no tiene ticket previo al que compensar
      if(GetPair(lTicketProc,-1)!=0) continue;
      // Si no tiene para comprobar
      TYPE_POS=cPos.PositionType();
      dprice=cPos.PriceCurrent();
      DnewTP=GetTPBreakEvent(TYPE_POS);
      DnewTP=NormalizeDouble(DnewTP,Digits());
      // Poner SL según precio actual
      if(TYPE_POS==POSITION_TYPE_SELL)
      {
         DSL=dprice+((iFrancisca*2)*pips);
         if(dprice>DnewTP) continue;
         DnewTP=dprice-((TakeProfit)*pips);
      }
      else
      {
         DSL=dprice-((iFrancisca*2)*pips);
         if(dprice<DnewTP) continue;
         DnewTP=dprice+((TakeProfit)*pips);
      }
      if(!cTrade.PositionModify(lTicketProc,DSL,DnewTP))
      {
         vtext="Error en función ApplyBreakEvent al actualizar niveles en ticket "+IntegerToString(lTicketProc)+" error:"+IntegerToString(GetLastError());
         ENUMTXT = PRINT;
         expertLog();
         return -1;
      }
      vtext="BreakEvent aplicado en ticket "+IntegerToString(lTicketProc)+". Nuevo TP:"+DoubleToString(DnewTP,5)+".";
      ENUMTXT = PRINT;
      expertLog();
   }
   // Bien
   return 1;
}
// Retorna el TP de la oparción cargada: OPEN+ TP +2Francisca
double GetTPBreakEvent(ENUM_POSITION_TYPE TYPE_POS)
{
   double dOpen = 0.00;
   double DnewTP = 0.00;
   dOpen=cPos.PriceOpen();
   if(TYPE_POS==POSITION_TYPE_SELL)
   {
      // Mision cumplida. SELL
      DnewTP=dOpen-((TakeProfit+iFrancisca)*pips);
   }
   else
   {
      // Mision cumplida. Nueva misión BUY
      DnewTP=dOpen+((TakeProfit+iFrancisca)*pips);
   }
   return DnewTP;  
}

//              ------------------------------------------------------------------------------------------------------------------- //
//              ------------------------------------------- BREAKEVENT CODE ------------------------------------------------------- //
//              ------------------------------------------------------------------------------------------------------------------- //



// ------------------------------------------------------------------------------------------------------------------- //
// ---------------------------------------------- GREEN CODE --------------------------------------------------------- //
// ------------------------------------------------------------------------------------------------------------------- //

// Se le pasa el precio del proximo scalp y se ajusta para no estar en zonas cercanas a 0 0 a 50 pips.
double GetGreenPrice(double dNewPrice,ENUM_POSITION_TYPE TYPE_POS)
{
   // Para la mayoría de pares de divisas 1 pip es 0.00001; para pares de divisas con el Yen Japonés como EUR/JPY 1 pip es 0.001
   double dCalc=0;
   double dPipsNew=0;
   string sRighPips;
   int iPips;
   dCalc=dNewPrice;
   sRighPips=DoubleToString(dNewPrice,5);
   // Control puto YEN
   if(pips==0.001)
   {
      sRighPips=DoubleToString(dNewPrice,3);
   }
   // Hacer siempre la posición más cercana a la operación a finalizar (ganar menos pero asegurar).
   if(TYPE_POS==POSITION_TYPE_BUY)
   {
      dPipsNew=(iFrancisca*0.5*pips)*(-1);
   }
   else
   {
      dPipsNew=(iFrancisca*0.5*pips);
   }
   sRighPips=StringSubstr(sRighPips, StringLen(sRighPips)-2,2);
   iPips=(int)sRighPips;
   // Control de saltos
   if((iPips>46 && iPips<54) || (iPips>95 || iPips<5))
   {
      // Sumar iFrancisca
      dCalc=(dNewPrice+(dPipsNew));
   }
   // Bien
   return dCalc;
   
}



//              ------------------------------------------------------------------------------------------------------------------- //
//              ---------------------------------------------- GREEN CODE --------------------------------------------------------- //
//              ------------------------------------------------------------------------------------------------------------------- //

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////// NEW DEVS


///////////////////////////// DEPRECIDED FUNTIONS


